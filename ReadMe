算法过程:

1. 运行 database/ TrainDataModel.py
   用sql 提取数据
   生成 data/ trainData.csv
   数据格式：
   week0Height,week0Weight,week1Weight,week2Weight,week3Weight,week4Weight,check1,check2,check3,check4,check5,check6,check7,check8,check9,check10,check11,check12,check13,check14,check15,check16,check17,check18,check19,check20,check21,check22,check23,check24,check25,check26,check27,check28,breakfast1,breakfast2,breakfast3,breakfast4,breakfast5,breakfast6,breakfast7,breakfast8,breakfast9,breakfast10,breakfast11,breakfast12,breakfast13,breakfast14,breakfast15,breakfast16,breakfast17,breakfast18,breakfast19,breakfast20,breakfast21,breakfast22,breakfast23,breakfast24,breakfast25,breakfast26,breakfast27,breakfast28,lunch1,lunch2,lunch3,lunch4,lunch5,lunch6,lunch7,lunch8,lunch9,lunch10,lunch11,lunch12,lunch13,lunch14,lunch15,lunch16,lunch17,lunch18,lunch19,lunch20,lunch21,lunch22,lunch23,lunch24,lunch25,lunch26,lunch27,lunch28,dinner1,dinner2,dinner3,dinner4,dinner5,dinner6,dinner7,dinner8,dinner9,dinner10,dinner11,dinner12,dinner13,dinner14,dinner15,dinner16,dinner17,dinner18,dinner19,dinner20,dinner21,dinner22,dinner23,dinner24,dinner25,dinner26,dinner27,dinner28,trainning1,trainning2,trainning3,trainning4,trainning5,trainning6,trainning7,trainning8,trainning9,trainning10,trainning11,trainning12,trainning13,trainning14,trainning15,trainning16,trainning17,trainning18,trainning19,trainning20,trainning21,trainning22,trainning23,trainning24,trainning25,trainning26,trainning27,trainning28,speak1,speak2,speak3,speak4,speak5,speak6,speak7,speak8,speak9,speak10,speak11,speak12,speak13,speak14,speak15,speak16,speak17,speak18,speak19,speak20,speak21,speak22,speak23,speak24,speak25,speak26,speak27,speak28,greed1,greed2,greed3,greed4,greed5,greed6,greed7,greed8,greed9,greed10,greed11,greed12,greed13,greed14,greed15,greed16,greed17,greed18,greed19,greed20,greed21,greed22,greed23,greed24,greed25,greed26,greed27,greed28,pressure1,pressure2,pressure3,pressure4,pressure5,pressure6,pressure7,pressure8,pressure9,pressure10,pressure11,pressure12,pressure13,pressure14,pressure15,pressure16,pressure17,pressure18,pressure19,pressure20,pressure21,pressure22,pressure23,pressure24,pressure25,pressure26,pressure27,pressure28,menstrual1,menstrual2,menstrual3,menstrual4,menstrual5,menstrual6,menstrual7,menstrual8,menstrual9,menstrual10,menstrual11,menstrual12,menstrual13,menstrual14,menstrual15,menstrual16,menstrual17,menstrual18,menstrual19,menstrual20,menstrual21,menstrual22,menstrual23,menstrual24,menstrual25,menstrual26,menstrual27,menstrual28

2. 运行 pre_deal_data/ watch_data.py
   以体重为依据洗数据
   生成 data/ w.csv

3. 运行 pre_deal_data / make_one_label_csv.py

   在一个csv里面对每个人做标签 ：
   ,label1,label2,label3,label4,label5,label6,label7,label8,label9,label10,label11,label12,label13,label14,label15,label16,label17,label18,label19,label20,label21,label22,label23,label24,label25,label26,label27

   生成 data / labelAll.csv

4. 运行 pre_deal_data / add_null_weight.py
   用week0Weight,week1Weight,week2Weight,week3Weight,week4Weight ,生成每一天的体重

   算法思路：
          新数据读出来的格式是 week0Weight, [day1Weight,day2Weight,day3Weight,day4Weight,day5Weight,day6Weight,day7Weight,,,day28Weight]
          先记录一下开营体重 ，用这个记录的体重填充后面空缺的体重，直到碰见了第n天记录的实际体重 ， 用第n天的体重 替换 那个记录的体重 ，继续填充

   生成 data / add_null_weight.csv




5. 运行 pre_deal_data / add_lastLabel1_csv.py
   生成 data / add_lastLabel1.csv

   生成最后一个标签是1 的位置

   根据第3步打的标签: label1 ,label2 ...label27

   例如: label25 = 0 ，代表用户(26-28)天跑了（第25天是用户的最后一天）
        label25 = 1 , 代表用户(26-28)天没跑 （第25天不是用户的最后一天）

   用算法生成用户最后一个label是1 的位置（label1,label2,,,最后一个是1的label）（新增字段 lastLabel1 ）， 因为一共有27个标签，
   所以会产生 28个 位置 ，从（0 -> 27），
   lastLabel1 =  0 代表 （label1 -> label27 全是0 , 这是一个特殊的情况）

   lastLabel1 =  1 代表 （label1 是 最后一个1）
   lastLabel1 =  25 代表 （label25 是 最后一个1）

   对应直方图也是有28个柱（顺序按照 0-27个柱去描述， 对应 lastLabel1 的（0-27） 的值的个数）

   直方图解释：
      第0个柱表示，lastLabel1 = 0 的人数， lastLabel1 = 0 ，代表 label1 -> label27 全是0，
      而最早的 label1 = 0 ，代表 用户从第2天开始 ，跑了(2->28天 不在了)

      第1个柱表示， lastLabel1 = 1 的人数，  lastLabel1 = 1， 代表 label1 = 1 , label2->
      label27 全是0 ，说明 用户从 第3天开始 ，跑了(3->28天 不在了 )

      以此类推

      第26个柱表示， lastLabel1 = 26 的人数，  lastLabel1 = 26， 代表 label26 = 1 , label28
      是0 ，说明 用户从 第28天开始 ，跑了(28->28天 不在了 )


      第27个柱表示， lastLabel1 = 27 的人数，  lastLabel1 = 27， 代表 label27 = 1 , 第28天还有
      数据，说明 用户至始至终 没跑

   这个字典键 代表lastLabel1 ，值代表 键对应的人数



6.  运行 logistic_predict / version1_dayWeight / make_train_data_with_lastLabel1 .py
    生成从1-26天的时间 段 的训练数据
        logistic_predict/train_data
                        /train_data_with_lastLabel/1day_data.csv   2day_data.csv

    第1 天正负样本：
        取 lastLabel1 = 0 的人 ， 拿 前1天的数据 ，这些人是负样本，代表 从(2->28 天 ) 跑了
        相应的 取 lastLabel1 >0 的人 ，拿 第一天的数据 ，这些人是正样本 （代表 至少第2 天） 没跑

    第2 天正负样本：
        取 lastLabel1 = 1 的人 ， 拿 前2天的数据 ，这些人是负样本，代表 从(3->28 天 ) 跑了
        相应的 取 lastLabel1 >1 的人 ，拿 前2天的数据 ，这些人是正样本 （代表 至少第3 天） 没跑



    一直取到 lastLabel1 = 25 :
        取 lastLabel1 = 25 的人 ， 拿 前26天的数据 ，这些人是负样本，代表 从(27->28 天 ) 跑了

    lastLabel1 = 26 , 27 不取，因为26代表最后一天跑， 27 代表一直没跑 ，没有意义

    生成 1day_data.csv ,2day_data.csv

    
7.  算法结果:
    运行logistic_predict/predict
                       /balance_predict/make_real_predict_analysis.py

    数据集方案1：
        选取全部n 个负样本 ，正样本随机选n 个（正样本数量相等）

    训练结果：
    day  负样本个数  正样本个数     负样本预测对的个数  负样本召回率  所有正样本验证错的个数  正样本召回率  正样本预测错的n-23天离开  正样本预测错的剩余人数
    1天    531      21334        494             93.03%      2444                88.54%     1347                  1097
    2      124      21210        105             84.68%      3648                82.8%      1856                  1792
    3      123      21087        101             82.11%      5097                75.83%     2330                  2768
    4      128      20959        112             87.5%       6234                70.26%     2589                  3645
    5      74       20885        67              90.54%      5164                75.27%     2476                  2688
    6      50       20835        47              94.0%       4954                76.22%     2409                  2545
    7      327      20508        295             90.21%      3519                82.84%     1880                  1639
    8      146      20362        127             86.99%      4429                78.25%     2021                  2408
    9      147      20215        119             80.95%      5019                75.17%     2140                  2874
    10     162      20053        141             87.04%      5224                73.95%     2189                  3035
    11     176      19877        148             84.09%      4975                74.97%     1985                  2991
    12     96       19781        84              87.5%       5896                70.19%     2087                  3809
    13     68       19713        65              95.59%      5714                71.01%     2048                  3666
    14     494      19219        442             89.47%      4177                78.27%     1745                  2432
    15     237      18982        205             86.5%       4930                74.03%     1704                  3226
    16     243      18739        207             85.19%      4962                73.52%     1557                  3405
    17     264      18475        224             84.85%      5108                72.35%     1491                  3617
    18     244      18231        197             80.74%      5626                69.14%     1400                  4226
    19     150      18081        128             85.33%      5399                70.14%     1207                  4192
    20     144      17937        127             88.19%      5866                67.3%      1273                  4593
    21     1358     16579        1207            88.88%      3613                78.21%     287                   3326
    22     475      16104        386             81.26%      4705                70.78%     0                     4705
    23     596      15508        488             81.88%      4544                70.7%      0                     4544
    24     763      14745        605             79.29%      4785                67.55%     0                     4785
    25     1065     13680        827             77.65%      4135                69.77%     0                     4135
    26     987      12693        706             71.53%      4390                65.41%     0                     4390


    方案2：
        做1000个分类器，每次 n 个负样本 ，从所有 正样本中随机抽n 个 ，组合成 第 i 个分类器的训练集
        利用 正样本极多的 先验 条件 ，再1000个分类器的输出结果 ，做一些手脚。
        规则是 ，1000个 分类器 至少有一个 预测的是 1（预测为正样本 ），给出预测值是1
        否则，只有 1000个 分类器全是 0（预测为负样本），才给出标签0

    训练结果：




    方案3：
    自己制作预测算法，规则是，预测的最后3天没有打过一次卡，就预测为负样本，否则是正样本
    预测结果：
    day  负样本个数  正样本个数     负样本预测对的个数  负样本召回率  所有正样本验证错的个数  正样本召回率  正样本预测错的n-23天离开  正样本预测错的剩余人数








8. 1000个分类器加 ，手动添加正样本预测错的
       运行logistic_predict/predict/
               many_label1_predict/make_many_label1_analysis.py

   手动找的数据在这个文件夹里面


   整体最终·结果：


    day  负样本个数  正样本个数     负样本预测对的个数  负样本召回率  所有正样本验证错的个数  正样本召回率  正样本预测错的n-23天离开  正样本预测错的剩余人数
    1天    413      21894        375             90.8%       6809                68.9%      1847                  4962
    2      120      21774        76              63.33%      2306                89.41%     1231                  1075
    3      124      21650        76              61.29%      2134                90.14%     1181                  953
    4      123      21527        63              51.22%      1935                91.01%     1122                  813
    5      129      21398        61              47.29%      1616                92.45%     926                   690
    6      74       21324        19              25.68%      1134                94.68%     644                   490
    7      237      21087        137             57.81%      1444                93.15%     847                   597
    8      143      20944        62              43.36%      1015                95.15%     604                   411
    9      147      20797        58              39.46%      1073                94.84%     655                   418
    10     147      20650        54              36.73%      775                 96.25%     432                   343
    11     162      20488        51              31.48%      851                 95.85%     495                   356
    12     176      20312        55              31.25%      613                 96.98%     317                   296
    13     96       20216        25              26.04%      214                 98.94%     110                   104
    14     368      19848        177             48.1%       1081                94.55%     539                   542
    15     195      19653        58              29.74%      644                 96.72%     311                   333
    16     237      19416        81              34.18%      680                 96.5%      343                   337
    17     243      19173        59              24.28%      448                 97.66%     201                   247
    18     264      18909        63              23.86%      512                 97.29%     219                   293
    19     245      18664        48              19.59%      319                 98.29%     127                   192
    20     150      18514        27              18.0%       123                 99.34%     42                    81
    21     1133     17381        677             59.75%      1215                93.01%     107                   1108
    22     440      16941        121             27.5%       475                 97.2%      0                     475
    23     484      16457        109             22.52%      588                 96.43%     0                     588
    24     606      15851        151             24.92%      630                 96.03%     0                     630
    25     776      15075        194             25.0%       672                 95.54%     0                     672
    26     1089     13986        354             32.51%      726                 94.81%     0                     726



 第1天的时候，算法预测的要跑的人（共7184人）,（负样本预测对的375人 + 在第8-23天离开的1847人）=2222人，2222/7184= 31% ,算法预测的31% 管理师聊的都有意义
    第2天的时候，算法预测的要跑的人（共2382人）,（负样本预测对的76人 + 在第8-23天离开的1231人）=1307人，1307/2382 = 55% ,算法预测的55% 管理师聊的都有意义
    第3天的时候，算法预测的要跑的人（共2134人）,（负样本预测对的76人 + 在第8-23天离开的1181人）=1257人，1257/2134 = 57% ,算法预测的57% 管理师聊的都有意义
    第4天的时候，算法预测的要跑的人（共1935人）,（负样本预测对的63人 + 在第8-23天离开的1122人）=1185人，1185/1935 = 59% ,算法预测的59% 管理师聊的都有意义
    第5天的时候，算法预测的要跑的人（共1677人）,（负样本预测对的61人 + 在第8-23天离开的926人）=987人，987/1677 = 59% ,算法预测的59% 管理师聊的都有意义
    第6天的时候，算法预测的要跑的人（共1153人）,（负样本预测对的19人 + 在第8-23天离开的644人）=663人，663/1153 = 58% ,算法预测的58% 管理师聊的都有意义
    第7天的时候，算法预测的要跑的人（共1581人）,（负样本预测对的137人 + 在第8-23天离开的847人）=984人，984/1581= 62% ,算法预测的62% 管理师聊的都有意义
    第8天的时候，算法预测的要跑的人（共1077人）,（负样本预测对的62人 + 在第8-23天离开的604人）=666人，666/1077 = 62% ,算法预测的62% 管理师聊的都有意义
    第9天的时候，算法预测的要跑的人（共1131人）,（负样本预测对的58人 + 在第8-23天离开的655人）=713人，713/1131 = 63% ,算法预测的63% 管理师聊的都有意义
    第10天的时候，算法预测的要跑的人（共829人）,（负样本预测对的54人 + 在第8-23天离开的432人）=486人，486/829 = 59% ,算法预测的59% 管理师聊的都有意义
    第11天的时候，算法预测的要跑的人（共902人）,（负样本预测对的51人 + 在第8-23天离开的495人）=546人，546/902 = 61% ,算法预测的61% 管理师聊的都有意义
    第12天的时候，算法预测的要跑的人（共668人）,（负样本预测对的55人 + 在第8-23天离开的317人）=372人，372/668 = 56% ,算法预测的56% 管理师聊的都有意义
    第13天的时候，算法预测的要跑的人（共239人）,（负样本预测对的25人 + 在第8-23天离开的110人）=135人，135/239 = 56% ,算法预测的56% 管理师聊的都有意义
    第14天，算法预测的要跑的人（共1258人）,    （负样本预测对的177人 + 在第15-23天离开的539人）=716人，716/1258 = 57% ,算法预测的57% 管理师跟他们聊有意义
    第15天的时候，算法预测的要跑的人（共702人）,（负样本预测对的58人 + 在第8-23天离开的311人）=369人，369/702 = 53% ,算法预测的53% 管理师聊的都有意义
    第16天的时候，算法预测的要跑的人（共761人）,（负样本预测对的81人 + 在第8-23天离开的343人）=424人，424/761 = 56% ,算法预测的56% 管理师聊的都有意义
    第17天的时候，算法预测的要跑的人（共507人）,（负样本预测对的59人 + 在第8-23天离开的201人）=260人，260/507 = 51% ,算法预测的51% 管理师聊的都有意义
    第18天的时候，算法预测的要跑的人（共575人）,（负样本预测对的63人 + 在第8-23天离开的219人）=282人，282/575 = 49% ,算法预测的49% 管理师聊的都有意义
    第19天的时候，算法预测的要跑的人（共367人）,（负样本预测对的48人 + 在第8-23天离开的127人）=175人，175/367 = 48% ,算法预测的48% 管理师聊的都有意义
    第20天的时候，算法预测的要跑的人（共150人）,（负样本预测对的27人 + 在第8-23天离开的42人）=69人，69/150 = 46% ,算法预测的46% 管理师聊的都有意义
    第21天，算法预测的要跑的人（共1892人）,    （负样本预测对的677人 + 在第22-23天离开的107人）=784人，784/1892 = 41% ,算法预测的41% 管理师跟他们聊有意义
    第22天的时候，算法预测的要跑的人（共596人）,（负样本预测对的121人 + 在第8-23天离开的0人）=121人，121/596 = 20% ,算法预测的20% 管理师聊的都有意义
    第23天的时候，算法预测的要跑的人（共697人）,（负样本预测对的109人 + 在第8-23天离开的0人）=109人，109/697 = 16% ,算法预测的16% 管理师聊的都有意义
    第24天的时候，算法预测的要跑的人（共781人）,（负样本预测对的151人 + 在第8-23天离开的0人）=151人，151/781 = 19% ,算法预测的19% 管理师聊的都有意义
    第25天的时候，算法预测的要跑的人（共866人）,（负样本预测对的194人 + 在第8-23天离开的0人）=194人，194/866 = 22% ,算法预测的22% 管理师聊的都有意义
    第26天的时候，算法预测的要跑的人（共1080人）,（负样本预测对的354人 + 在第8-23天离开的0人）=354人，354/1080 = 33% ,算法预测的33% 管理师聊的都有意义


1.因为逻辑回归是根据数据集学习的参数，所以查看负样本的数据集 ，以了解输出的负样本形状

 天数  每天离开人数（负样本） 后3天全不打卡的人数
  1    413               353
  2    20                19
  3    124               13
  4    123               2
  5    129               8
  6    74                1
  7    237               82
  8    143               12
  9    147               7
  10   147               10
  11   162               11
  12   176               5
  13   96                6
  14   368               175
  15   195               14
  16   237               23
  17   243               17
  18   264               18
  19   245               11
  20   150               17
  21   1133              603
  22   440               42
  23   484               38
  24   606               41
  25   776               57
  26   1089              85


playhouse
csv
peewee
database
time
operator
xlwt
numpy
random
math
sklearn

